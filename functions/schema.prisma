generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model regiones {
  id_region     Int      @id @default(autoincrement())
  codigo_region String   @unique @db.VarChar(10) // e.g., "XV", "RM"
  nombre        String   @db.VarChar(100)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  comunas    comunas[]
  direcciones direcciones[]

  @@map("regiones")
}

model comunas {
  id_comuna  Int      @id @default(autoincrement())
  id_region  Int
  nombre     String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  region      regiones      @relation(fields: [id_region], references: [id_region])
  direcciones direcciones[]

  @@map("comunas")
}

model direcciones {
  id_direccion     Int      @id @default(autoincrement())
  calle            String   @db.VarChar(200)
  numero           String?  @db.VarChar(20)
  departamento     String?  @db.VarChar(20)
  id_comuna        Int
  id_region        Int
  codigo_postal    String?  @db.VarChar(10)
  referencia       String?  @db.Text // Additional reference/landmark
  latitud          Decimal? @db.Decimal(9, 6)
  longitud         Decimal? @db.Decimal(9, 6)
  direccion_completa String? @db.Text // Computed field for full address
  activa           Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  comuna    comunas   @relation(fields: [id_comuna], references: [id_comuna])
  region    regiones  @relation(fields: [id_region], references: [id_region])
  
  // Back relations
  proveedores_direccion proveedores[]
  clientes_direccion    clientes[]
  pedidos_direccion     pedidos[]

  @@map("direcciones")
}

// User table
model usuarios {
  id_usuario          Int      @id @default(autoincrement())
  nombre              String   @db.VarChar(100)
  email               String   @unique @db.VarChar(100)
  contrasena_hash     String   @db.Text
  fecha_registro      DateTime @default(now()) @db.Timestamp
  activo              Boolean  @default(true)
  profile_picture_url String?  @db.Text
  id_plan             Int?
  plan                planes?  @relation(fields: [id_plan], references: [id_plan])
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  roles               UsuarioRol[]
  proveedor           proveedores?
  cliente             clientes?
  comentarios         comentarios[]
  solicitudescontacto solicitudescontacto[]
  pagos               pagos[]
  participaciones     ParticipanteColectivo[]
  pedidos             pedidos[]
  notificaciones      notificaciones[]
  lista_deseos        lista_deseos[]

  @@map("usuarios")
}

model roles {
  id_rol      Int     @id @default(autoincrement())
  nombre      String  @unique @db.VarChar(50) // e.g. 'comprador', 'proveedor', 'admin'
  descripcion String? @db.Text

  // Relations
  usuarios UsuarioRol[]

  @@map("roles")
}

model UsuarioRol {
  id_usuario Int
  id_rol     Int

  usuario usuarios @relation(fields: [id_usuario], references: [id_usuario])
  rol     roles    @relation(fields: [id_rol], references: [id_rol])

  @@id([id_usuario, id_rol])
  @@map("usuario_rol")
}

// Provider/Seller table
model proveedores {
  id_proveedor      Int      @id @default(autoincrement())
  id_usuario        Int      @unique
  usuario           usuarios @relation(fields: [id_usuario], references: [id_usuario])
  nombre_negocio    String   @db.VarChar(100)
  descripcion       String?  @db.Text
  telefono_contacto String?  @db.VarChar(20)
  id_direccion      Int?
  direccion         direcciones? @relation(fields: [id_direccion], references: [id_direccion])
  
  latitud           Decimal? @db.Decimal(9, 6)
  longitud          Decimal? @db.Decimal(9, 6)
  destacado         Boolean  @default(false)
  email             String?  @unique @db.VarChar(100) // email contacto proveedor puede ser distinto del de la ucneta de usuario
  radio_entrega_km  Int?         @default(10) // Delivery radius in kilometers
  cobra_envio       Boolean      @default(true)
  envio_gratis_desde Decimal?    @db.Decimal(10, 2) // Free shipping threshold
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  productos           productos[]
  solicitudescontacto solicitudescontacto[]
  suscripciones       suscripciones[]
  publicidad          publicidad[]
  campanas_colectivas compras_colectivas[]
  areas_servicio      areas_servicio[]

  @@map("proveedores")
}

model areas_servicio {
  id_area      Int         @id @default(autoincrement())
  id_proveedor Int
  proveedor    proveedores @relation(fields: [id_proveedor], references: [id_proveedor])
  tipo         String      @db.VarChar(20) // 'comuna', 'region', 'radio'
  id_comuna    Int?
  id_region    Int?
  radio_km     Int?        // For radius-based service areas
  costo_envio  Decimal?    @db.Decimal(8, 2)
  tiempo_entrega_dias Int? @default(3)
  activa       Boolean     @default(true)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@map("areas_servicio")
}

model clientes {
  id_cliente     Int      @id @default(autoincrement())
  id_usuario     Int      @unique
  usuario        usuarios @relation(fields: [id_usuario], references: [id_usuario])
  id_direccion   Int?
  direccion      direcciones? @relation(fields: [id_direccion], references: [id_direccion])
  telefono       String?  @db.VarChar(20)
  fecha_registro DateTime @default(now()) @db.Timestamp
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("clientes")
}

// Categories table
model categorias {
  id_categoria Int      @id @default(autoincrement())
  nombre       String   @db.VarChar(100)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  productos productos[]

  @@map("categorias")
}

// Products table
model productos {
  id_producto       Int      @id @default(autoincrement())
  id_proveedor      Int
  id_categoria      Int
  nombre_producto   String   @db.VarChar(100)
  descripcion       String?  @db.Text
  precio_unitario   Decimal  @db.Decimal(10, 2)
  imagen_url        String?  @db.Text
  disponible        Boolean  @default(true)
  fecha_publicacion DateTime @default(now()) @db.Timestamp
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  proveedor           proveedores          @relation(fields: [id_proveedor], references: [id_proveedor])
  categoria           categorias           @relation(fields: [id_categoria], references: [id_categoria])
  comentarios         comentarios[]
  campanas_colectivas compras_colectivas[]
  items_pedido        ItemPedido[]
  lista_deseos        lista_deseos[]
  descuentos_cantidad descuentos_cantidad[]

  @@map("productos")
}

// Quantity discounts for individual products
model descuentos_cantidad {
  id_descuento        Int       @id @default(autoincrement())
  id_producto         Int
  producto            productos @relation(fields: [id_producto], references: [id_producto])
  cantidad_minima     Int       // Minimum quantity for this discount tier
  descuento_porcentaje Decimal  @db.Decimal(5, 2) // Discount percentage (e.g., 10.50 for 10.5%)
  precio_descuento    Decimal?  @db.Decimal(10, 2) // Alternative: fixed discounted price
  activo              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  @@unique([id_producto, cantidad_minima]) // One discount per quantity level per product
  @@map("descuentos_cantidad")
}

// Comments/Reviews table
model comentarios {
  id_comentario Int      @id @default(autoincrement())
  id_cliente    Int
  id_producto   Int
  texto         String   @db.Text
  calificacion  Int // 1-5 stars
  fecha         DateTime @default(now()) @db.Timestamp
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  cliente  usuarios  @relation(fields: [id_cliente], references: [id_usuario])
  producto productos @relation(fields: [id_producto], references: [id_producto])

  @@map("comentarios")
}

// Contact requests table
model solicitudescontacto {
  id_solicitud    Int      @id @default(autoincrement())
  id_cliente      Int
  id_proveedor    Int
  mensaje         String   @db.Text
  fecha_solicitud DateTime @default(now()) @db.Timestamp
  estado          String   @default("pendiente") // 'pendiente', 'respondida', 'cerrada'
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  cliente   usuarios    @relation(fields: [id_cliente], references: [id_usuario])
  proveedor proveedores @relation(fields: [id_proveedor], references: [id_proveedor])

  @@map("solicitudescontacto")
}

// Subscription plans table
model planes {
  id_plan        Int      @id @default(autoincrement())
  nombre         String   @db.VarChar(50)
  precio_mensual Decimal  @db.Decimal(10, 2)
  descripcion    String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  usuarios      usuarios[]
  suscripciones suscripciones[]

  @@map("planes")
}

// Subscriptions table
model suscripciones {
  id_suscripcion Int       @id @default(autoincrement())
  id_proveedor   Int
  id_plan        Int
  fecha_inicio   DateTime  @db.Timestamp
  fecha_fin      DateTime? @db.Timestamp
  activa         Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  // Relations
  proveedor proveedores @relation(fields: [id_proveedor], references: [id_proveedor])
  plan      planes      @relation(fields: [id_plan], references: [id_plan])

  @@map("suscripciones")
}

// Payments table
model pagos {
  id_pago     Int      @id @default(autoincrement())
  id_usuario  Int
  monto       Decimal  @db.Decimal(10, 2)
  metodo_pago String   @db.VarChar(50)
  fecha_pago  DateTime @default(now()) @db.Timestamp
  estado      String   @default("pendiente") // 'pendiente', 'completado', 'fallido'
  id_pedido   Int? // Link to order if applicable
  pedido      pedidos? @relation(fields: [id_pedido], references: [id_pedido])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  usuario usuarios @relation(fields: [id_usuario], references: [id_usuario])

  @@map("pagos")
}

// Advertising/Publicity table
model publicidad {
  id_publicidad    Int       @id @default(autoincrement())
  id_proveedor     Int
  imagen_destacada String?   @db.Text
  texto_destacado  String?   @db.Text
  fecha_inicio     DateTime  @db.Timestamp
  fecha_fin        DateTime? @db.Timestamp
  activa           Boolean   @default(true)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  proveedor proveedores @relation(fields: [id_proveedor], references: [id_proveedor])

  @@map("publicidad")
}

// Enhanced collective buying campaigns
model compras_colectivas {
  id_campana        Int         @id @default(autoincrement())
  nombre            String      @db.VarChar(100)
  descripcion       String?     @db.Text
  id_proveedor      Int
  proveedor         proveedores @relation(fields: [id_proveedor], references: [id_proveedor])
  id_producto       Int
  producto          productos   @relation(fields: [id_producto], references: [id_producto])
  precio_objetivo   Decimal     @db.Decimal(10, 2)
  cantidad_objetivo Int

  // Enhanced campaign rules
  min_participantes    Int?
  max_participantes    Int?
  cantidad_min_usuario Int     @default(1)
  cantidad_max_usuario Int?
  requiere_aprobacion  Boolean @default(false)

  fecha_inicio DateTime  @default(now())
  fecha_fin    DateTime?
  estado       String    @default("abierta") // abierta, cerrada, completada, cancelada
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  participantes   ParticipanteColectivo[]
  escalas_precios escalas_precios[]
  progreso        progreso_campana?
  pedidos         pedidos[]
  notificaciones  notificaciones[]

  @@map("compras_colectivas")
}

model ParticipanteColectivo {
  id_participante Int                @id @default(autoincrement())
  id_campana      Int
  campana         compras_colectivas @relation(fields: [id_campana], references: [id_campana])
  id_usuario      Int
  usuario         usuarios           @relation(fields: [id_usuario], references: [id_usuario])
  cantidad        Int
  monto_aportado  Decimal            @db.Decimal(10, 2)
  fecha_aporte    DateTime           @default(now())
  estado          String             @default("activo") // activo, retirado, completado
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt

  @@unique([id_campana, id_usuario])
  @@map("participantes_colectivos")
}

// Tier-based pricing for collective campaigns
model escalas_precios {
  id_escala            Int                @id @default(autoincrement())
  id_campana           Int
  campana              compras_colectivas @relation(fields: [id_campana], references: [id_campana])
  cantidad_minima      Int
  precio_unitario      Decimal            @db.Decimal(10, 2)
  descuento_porcentaje Decimal?           @db.Decimal(5, 2)
  activa               Boolean            @default(true)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  @@map("escalas_precios")
}

// Real-time progress tracking for campaigns
model progreso_campana {
  id_progreso            Int                @id @default(autoincrement())
  id_campana             Int                @unique
  campana                compras_colectivas @relation(fields: [id_campana], references: [id_campana])
  participantes_actuales Int                @default(0)
  cantidad_actual        Int                @default(0)
  monto_recaudado        Decimal            @default(0) @db.Decimal(15, 2)
  porcentaje_completado  Decimal            @default(0) @db.Decimal(5, 2)
  precio_actual          Decimal?           @db.Decimal(10, 2) // Current price based on tier
  siguiente_tier         Int? // Next quantity milestone
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt

  @@map("progreso_campanas")
}

// Order management system
model pedidos {
  id_pedido         Int                 @id @default(autoincrement())
  id_usuario        Int
  usuario           usuarios            @relation(fields: [id_usuario], references: [id_usuario])
  tipo_pedido       String // 'individual', 'colectivo'
  id_campana        Int? // nullable for individual orders
  campana           compras_colectivas? @relation(fields: [id_campana], references: [id_campana])
  total             Decimal             @db.Decimal(10, 2)
  estado            String              @default("pendiente") // pendiente, confirmado, enviado, entregado, cancelado
  fecha_pedido      DateTime            @default(now())
  fecha_entrega     DateTime?
  id_direccion_entrega Int?
  direccion_entrega    direcciones? @relation(fields: [id_direccion_entrega], references: [id_direccion])
  costo_envio       Decimal?            @db.Decimal(8, 2)
  notas             String?             @db.Text
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt

  // Relations
  items ItemPedido[]
  pagos pagos[]

  @@map("pedidos")
}

model ItemPedido {
  id_item         Int       @id @default(autoincrement())
  id_pedido       Int
  pedido          pedidos   @relation(fields: [id_pedido], references: [id_pedido])
  id_producto     Int
  producto        productos @relation(fields: [id_producto], references: [id_producto])
  cantidad        Int
  precio_unitario Decimal   @db.Decimal(10, 2)
  subtotal        Decimal   @db.Decimal(10, 2)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@map("items_pedido")
}

// Notification system for collective buying
model notificaciones {
  id_notificacion Int                 @id @default(autoincrement())
  id_usuario      Int
  usuario         usuarios            @relation(fields: [id_usuario], references: [id_usuario])
  tipo            String // 'campana_iniciada', 'objetivo_alcanzado', 'campana_cerrada', 'nuevo_tier', 'pedido_confirmado'
  titulo          String              @db.VarChar(200)
  mensaje         String              @db.Text
  leida           Boolean             @default(false)
  id_campana      Int?
  campana         compras_colectivas? @relation(fields: [id_campana], references: [id_campana])
  url_accion      String?             @db.VarChar(255) // URL to redirect user for action
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt

  @@map("notificaciones")
}

// Wishlist/Interest tracking
model lista_deseos {
  id_lista          Int       @id @default(autoincrement())
  id_usuario        Int
  usuario           usuarios  @relation(fields: [id_usuario], references: [id_usuario])
  id_producto       Int
  producto          productos @relation(fields: [id_producto], references: [id_producto])
  notificar_campana Boolean   @default(true)
  cantidad_deseada  Int? // Desired quantity for collective buying
  precio_maximo     Decimal?  @db.Decimal(10, 2) // Maximum price willing to pay
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@unique([id_usuario, id_producto])
  @@map("lista_deseos")
}