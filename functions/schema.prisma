
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User/Customer table
model usuarios {
  id_usuario          Int      @id @default(autoincrement())
  nombre              String   @db.VarChar(100)
  email               String   @unique @db.VarChar(100)
  contrasena_hash     String   @db.Text
  tipo_usuario        String   @db.VarChar // 'comprador', 'admin', etc.
  fecha_registro      DateTime @default(now()) @db.Timestamp
  activo              Boolean  @default(true)

  // Relations
  comentarios         comentarios[]
  solicitudescontacto solicitudescontacto[]
  pagos               pagos[]

  @@map("usuarios")
}

// Provider/Seller table
model proveedores {
  id_proveedor      Int       @id @default(autoincrement())
  nombre_negocio    String    @db.VarChar(100)
  descripcion       String?   @db.Text
  telefono_contacto String?   @db.VarChar(20)
  direccion         String?   @db.VarChar(150)
  latitud           Decimal?  @db.Decimal(9, 6)
  longitud          Decimal?  @db.Decimal(9, 6)
  plan_actual       String?   @db.VarChar(50)
  destacado         Boolean   @default(false)

  // Relations
  productos           productos[]
  solicitudescontacto solicitudescontacto[]
  suscripciones       suscripciones[]
  publicidad          publicidad[]

  @@map("proveedores")
}

// Products table
model productos {
  id_producto        Int       @id @default(autoincrement())
  id_proveedor       Int
  nombre_producto    String    @db.VarChar(100)
  descripcion        String?   @db.Text
  precio_unitario    Decimal   @db.Decimal(10, 2)
  imagen_url         String?   @db.Text
  disponible         Boolean   @default(true)
  fecha_publicacion  DateTime  @default(now()) @db.Timestamp

  // Relations
  proveedor          proveedores @relation(fields: [id_proveedor], references: [id_proveedor])
  comentarios        comentarios[]

  @@map("productos")
}

// Comments/Reviews table
model comentarios {
  id_comentario  Int      @id @default(autoincrement())
  id_cliente     Int
  id_producto    Int
  texto          String   @db.Text
  calificacion   Int      // 1-5 stars
  fecha          DateTime @default(now()) @db.Timestamp

  // Relations
  cliente        usuarios @relation(fields: [id_cliente], references: [id_usuario])
  producto       productos @relation(fields: [id_producto], references: [id_producto])

  @@map("comentarios")
}

// Contact requests table
model solicitudescontacto {
  id_solicitud  Int      @id @default(autoincrement())
  id_cliente    Int
  id_proveedor  Int
  mensaje       String   @db.Text
  fecha_solicitud DateTime @default(now()) @db.Timestamp
  estado        String   @default("pendiente") // 'pendiente', 'respondida', 'cerrada'

  // Relations
  cliente       usuarios @relation(fields: [id_cliente], references: [id_usuario])
  proveedor     proveedores @relation(fields: [id_proveedor], references: [id_proveedor])

  @@map("solicitudescontacto")
}

// Subscription plans table
model planes {
  id_plan         Int      @id @default(autoincrement())
  nombre          String   @db.VarChar(50)
  precio_mensual  Decimal  @db.Decimal(10, 2)
  descripcion     String?  @db.Text

  // Relations
  suscripciones   suscripciones[]

  @@map("planes")
}

// Subscriptions table
model suscripciones {
  id_suscripcion  Int       @id @default(autoincrement())
  id_proveedor    Int
  id_plan         Int
  fecha_inicio    DateTime  @db.Timestamp
  fecha_fin       DateTime? @db.Timestamp
  activa          Boolean   @default(true)

  // Relations
  proveedor       proveedores @relation(fields: [id_proveedor], references: [id_proveedor])
  plan            planes @relation(fields: [id_plan], references: [id_plan])

  @@map("suscripciones")
}

// Payments table
model pagos {
  id_pago         Int      @id @default(autoincrement())
  id_usuario      Int
  monto           Decimal  @db.Decimal(10, 2)
  metodo_pago     String   @db.VarChar(50)
  fecha_pago      DateTime @default(now()) @db.Timestamp
  estado          String   @default("pendiente") // 'pendiente', 'completado', 'fallido'

  // Relations
  usuario         usuarios @relation(fields: [id_usuario], references: [id_usuario])

  @@map("pagos")
}

// Advertising/Publicity table
model publicidad {
  id_publicidad    Int       @id @default(autoincrement())
  id_proveedor     Int
  imagen_destacada String?   @db.Text
  texto_destacado  String?   @db.Text
  fecha_inicio     DateTime  @db.Timestamp
  fecha_fin        DateTime? @db.Timestamp
  activa           Boolean   @default(true)

  // Relations
  proveedor        proveedores @relation(fields: [id_proveedor], references: [id_proveedor])

  @@map("publicidad")
}
        